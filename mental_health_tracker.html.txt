<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>„É°„É≥„Çø„É´„Éò„É´„ÇπË®òÈå≤</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Noto Sans JP', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 900px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            color: white;
            margin-bottom: 30px;
        }

        .header h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .header p {
            font-size: 1.1rem;
            opacity: 0.9;
        }

        .card {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            backdrop-filter: blur(10px);
        }

        .section {
            margin: 25px 0;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 15px;
            border-left: 4px solid #667eea;
        }

        .section h3 {
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }

        .mood-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
            gap: 10px;
            margin: 15px 0;
        }

        .mood-btn {
            border: 2px solid #e1e5e9;
            border-radius: 12px;
            padding: 12px 8px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            background: white;
            text-align: center;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 5px;
        }

        .mood-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 3px 10px rgba(0,0,0,0.15);
        }

        .mood-btn.selected {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border-color: #667eea;
            transform: scale(1.05);
        }

        .mood-emoji {
            font-size: 1.5rem;
        }

        .checkbox-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
            gap: 10px;
            margin: 15px 0;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            padding: 10px;
            background: white;
            border-radius: 8px;
            border: 2px solid #e1e5e9;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .checkbox-item:hover {
            border-color: #667eea;
        }

        .checkbox-item.selected {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border-color: #667eea;
        }

        .checkbox-item input {
            margin-right: 8px;
            cursor: pointer;
        }

        .form-group {
            margin: 20px 0;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
            color: #555;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 10px;
            font-size: 1rem;
            transition: border-color 0.3s;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #667eea;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .scale-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .scale-item {
            background: white;
            padding: 15px;
            border-radius: 12px;
            border: 2px solid #e1e5e9;
        }

        .scale-label {
            font-weight: bold;
            margin-bottom: 10px;
            color: #555;
        }

        .scale-input {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .scale-input input[type="range"] {
            flex: 1;
            margin: 0;
        }

        .scale-value {
            font-weight: bold;
            color: #667eea;
            min-width: 30px;
            text-align: center;
        }

        .radio-group {
            display: flex;
            gap: 15px;
            margin: 10px 0;
        }

        .radio-item {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 8px 15px;
            background: white;
            border: 2px solid #e1e5e9;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .radio-item:hover {
            border-color: #667eea;
        }

        .radio-item input:checked + label {
            color: #667eea;
            font-weight: bold;
        }

        .btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1rem;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            width: 100%;
            margin: 20px 0 10px 0;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
        }

        .btn:active {
            transform: translateY(0);
        }

        .records {
            max-height: 500px;
            overflow-y: auto;
        }

        .record-item {
            background: linear-gradient(135deg, #f8f9fa, #e9ecef);
            border-radius: 15px;
            padding: 20px;
            margin: 15px 0;
            border-left: 5px solid #667eea;
            transition: all 0.3s ease;
        }

        .record-item:hover {
            transform: translateX(5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .record-date {
            font-weight: bold;
            color: #667eea;
            margin-bottom: 15px;
            font-size: 1.1rem;
        }

        .record-section {
            margin: 15px 0;
            padding: 10px;
            background: rgba(255,255,255,0.7);
            border-radius: 8px;
        }

        .record-section h4 {
            color: #555;
            margin-bottom: 8px;
            font-size: 1rem;
        }

        .record-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin: 8px 0;
        }

        .record-tag {
            background: #667eea;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 0.8rem;
        }

        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
            gap: 15px;
            margin: 20px 0;
        }

        .stat-item {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px;
            border-radius: 15px;
            text-align: center;
        }

        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .stat-label {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .tabs {
            display: flex;
            background: rgba(255,255,255,0.3);
            border-radius: 15px;
            padding: 5px;
            margin-bottom: 20px;
        }

        .tab {
            flex: 1;
            padding: 12px;
            text-align: center;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            color: white;
            font-weight: bold;
        }

        .tab.active {
            background: rgba(255,255,255,0.9);
            color: #333;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
        }

        .empty-state {
            text-align: center;
            color: #888;
            padding: 40px;
        }

        .empty-state i {
            font-size: 3rem;
            margin-bottom: 20px;
            opacity: 0.5;
        }

        @media (max-width: 600px) {
            .container {
                padding: 10px;
            }
            
            .card {
                padding: 20px;
            }
            
            .header h1 {
                font-size: 2rem;
            }
            
            .mood-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .checkbox-grid {
                grid-template-columns: 1fr;
            }
            
            .scale-container {
                grid-template-columns: 1fr;
            }
            
            .radio-group {
                flex-direction: column;
                gap: 10px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üå∏ „É°„É≥„Çø„É´„Éò„É´„ÇπË®òÈå≤</h1>
            <p>„ÅÇ„Å™„Åü„ÅÆÂøÉ„Å®Ë∫´‰Ωì„ÅÆÂÅ•Â∫∑„ÇíË©≥„Åó„ÅèË®òÈå≤„Åó„Åæ„Åó„Çá„ÅÜ</p>
        </div>

        <div class="tabs">
            <div class="tab active" onclick="switchTab('record')">Ë®òÈå≤„Åô„Çã</div>
            <div class="tab" onclick="switchTab('history')">Â±•Ê≠¥„ÇíË¶ã„Çã</div>
            <div class="tab" onclick="switchTab('stats')">Áµ±Ë®à</div>
        </div>

        <div id="record-tab" class="tab-content active">
            <div class="card">
                <h2>‰ªäÊó•„ÅÆË®òÈå≤</h2>
                <form id="moodForm">
                    <div class="section">
                        <h3>üé≠ ÂÖ∑‰ΩìÁöÑ„Å™Ê∞óÂàÜ„ÉªÊÑüÊÉÖ</h3>
                        <div class="mood-grid" id="moodGrid">
                            <button type="button" class="mood-btn" data-mood="happy">
                                <span class="mood-emoji">üòä</span>
                                <span>Âπ∏„Åõ</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="excited">
                                <span class="mood-emoji">ü§©</span>
                                <span>ËààÂ•Æ</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="calm">
                                <span class="mood-emoji">üòå</span>
                                <span>Á©è„ÇÑ„Åã</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="tired">
                                <span class="mood-emoji">üò¥</span>
                                <span>Áú†„Åü„ÅÑ</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="listless">
                                <span class="mood-emoji">üòë</span>
                                <span>ÁÑ°Ê∞óÂäõ</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="irritated">
                                <span class="mood-emoji">üò†</span>
                                <span>„Ç§„É©„Ç§„É©</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="anxious">
                                <span class="mood-emoji">üò∞</span>
                                <span>‰∏çÂÆâ</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="sad">
                                <span class="mood-emoji">üò¢</span>
                                <span>ÊÇ≤„Åó„ÅÑ</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="lonely">
                                <span class="mood-emoji">üòî</span>
                                <span>Â≠§Áã¨</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="confused">
                                <span class="mood-emoji">üòµ</span>
                                <span>Ê∑∑‰π±</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="focused">
                                <span class="mood-emoji">üßê</span>
                                <span>ÈõÜ‰∏≠</span>
                            </button>
                            <button type="button" class="mood-btn" data-mood="motivated">
                                <span class="mood-emoji">üí™</span>
                                <span>„ÇÑ„ÇãÊ∞ó</span>
                            </button>
                        </div>
                    </div>

                    <div class="section">
                        <h3>üè• Ë∫´‰Ωì„ÅÆÁóáÁä∂</h3>
                        <div class="checkbox-grid" id="symptomsGrid">
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'headache')">
                                <input type="checkbox" id="headache">
                                <label>ü§ï È†≠Áóõ</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'stomachache')">
                                <input type="checkbox" id="stomachache">
                                <label>ü§¢ ËÖπÁóõ„ÉªËÉÉÁóõ</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'nausea')">
                                <input type="checkbox" id="nausea">
                                <label>ü§Æ Âêê„ÅçÊ∞ó</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'skin_problem')">
                                <input type="checkbox" id="skin_problem">
                                <label>üò£ ËÇåËçí„Çå</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'insomnia')">
                                <input type="checkbox" id="insomnia">
                                <label>üò™ ‰∏çÁú†</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'oversleep')">
                                <input type="checkbox" id="oversleep">
                                <label>üò¥ ÈÅéÁú†</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'appetite_increase')">
                                <input type="checkbox" id="appetite_increase">
                                <label>üçΩÔ∏è È£üÊ¨≤Êó∫Áõõ</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'appetite_loss')">
                                <input type="checkbox" id="appetite_loss">
                                <label>üö´ È£üÊ¨≤‰∏çÊåØ</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'fatigue')">
                                <input type="checkbox" id="fatigue">
                                <label>üòµ‚Äçüí´ Áñ≤Âä¥ÊÑü</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'muscle_tension')">
                                <input type="checkbox" id="muscle_tension">
                                <label>üí™ Á≠ãËÇâ„ÅÆÁ∑äÂºµ</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'dizziness')">
                                <input type="checkbox" id="dizziness">
                                <label>üòµ „ÇÅ„Åæ„ÅÑ</label>
                            </div>
                            <div class="checkbox-item" onclick="toggleSymptom(this, 'palpitation')">
                                <input type="checkbox" id="palpitation">
                                <label>üíì ÂãïÊÇ∏</label>
                            </div>
                        </div>
                    </div>

                    <div class="section">
                        <h3>üìä Á≤æÁ•ûÁöÑÁóáÁä∂„ÅÆ„É¨„Éô„É´Ôºà0-10Ôºâ</h3>
                        <div class="scale-container">
                            <div class="scale-item">
                                <div class="scale-label">„ÅÜ„Å§ÁóáÁä∂</div>
                                <div class="scale-input">
                                    <span>0</span>
                                    <input type="range" id="depression" min="0" max="10" value="0" oninput="updateScaleValue('depression', this.value)">
                                    <span>10</span>
                                    <div class="scale-value" id="depression-value">0</div>
                                </div>
                            </div>
                            <div class="scale-item">
                                <div class="scale-label">‰∏çÂÆâÁóáÁä∂</div>
                                <div class="scale-input">
                                    <span>0</span>
                                    <input type="range" id="anxiety" min="0" max="10" value="0" oninput="updateScaleValue('anxiety', this.value)">
                                    <span>10</span>
                                    <div class="scale-value" id="anxiety-value">0</div>
                                </div>
                            </div>
                            <div class="scale-item">
                                <div class="scale-label">„Éë„Éã„ÉÉ„ÇØÁóáÁä∂</div>
                                <div class="scale-input">
                                    <span>0</span>
                                    <input type="range" id="panic" min="0" max="10" value="0" oninput="updateScaleValue('panic', this.value)">
                                    <span>10</span>
                                    <div class="scale-value" id="panic-value">0</div>
                                </div>
                            </div>
                            <div class="scale-item">
                                <div class="scale-label">Âº∑Ëø´ÁóáÁä∂</div>
                                <div class="scale-input">
                                    <span>0</span>
                                    <input type="range" id="ocd" min="0" max="10" value="0" oninput="updateScaleValue('ocd', this.value)">
                                    <span>10</span>
                                    <div class="scale-value" id="ocd-value">0</div>
                                </div>
                            </div>
                            <div class="scale-item">
                                <div class="scale-label">ADHDÁóáÁä∂</div>
                                <div class="scale-input">
                                    <span>0</span>
                                    <input type="range" id="adhd" min="0" max="10" value="0" oninput="updateScaleValue('adhd', this.value)">
                                    <span>10</span>
                                    <div class="scale-value" id="adhd-value">0</div>
                                </div>
                            </div>
                            <div class="scale-item">
                                <div class="scale-label">Ëß£Èõ¢ÁóáÁä∂</div>
                                <div class="scale-input">
                                    <span>0</span>
                                    <input type="range" id="dissociation" min="0" max="10" value="0" oninput="updateScaleValue('dissociation', this.value)">
                                    <span>10</span>
                                    <div class="scale-value" id="dissociation-value">0</div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="section">
                        <h3>üìÖ ÁîüÁêÜ„Å´„Å§„ÅÑ„Å¶</h3>
                        <div class="radio-group">
                            <div class="radio-item">
                                <input type="radio" id="menstruation-yes" name="menstruation" value="yes">
                                <label for="menstruation-yes">ü©∏ ÁîüÁêÜ‰∏≠</label>
                            </div>
                            <div class="radio-item">
                                <input type="radio" id="menstruation-pms" name="menstruation" value="pms">
                                <label for="menstruation-pms">‚ö†Ô∏è PMS</label>
                            </div>
                            <div class="radio-item">
                                <input type="radio" id="menstruation-no" name="menstruation" value="no">
                                <label for="menstruation-no">‚úÖ „Å™„Åó</label>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="sleep">Áù°Áú†ÊôÇÈñìÔºàÊôÇÈñìÔºâ</label>
                        <input type="number" id="sleep" min="0" max="24" step="0.5" placeholder="‰æã: 7.5">
                    </div>

                    <div class="form-group">
                        <label for="notes">„É°„É¢„ÉªË©≥Á¥∞</label>
                        <textarea id="notes" placeholder="‰ªäÊó•ÊÑü„Åò„Åü„Åì„Å®„ÇÑËµ∑„Åì„Å£„ÅüÂá∫Êù•‰∫ã„ÄÅËñ¨„ÅÆÊúçÁî®Áä∂Ê≥Å„Å™„Å©„ÄÅËá™Áî±„Å´Ë®òÈå≤„Åó„Å¶„Åè„Å†„Åï„ÅÑ..."></textarea>
                    </div>

                    <button type="submit" class="btn">Ë®òÈå≤„Çí‰øùÂ≠ò</button>
                </form>
            </div>
        </div>

        <div id="history-tab" class="tab-content">
            <div class="card">
                <h2>Ë®òÈå≤Â±•Ê≠¥</h2>
                <div id="recordsList" class="records">
                    <div class="empty-state">
                        <div>üìù</div>
                        <p>„Åæ„Å†Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì<br>ÊúÄÂàù„ÅÆË®òÈå≤„Çí‰ΩúÊàê„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ</p>
                    </div>
                </div>
            </div>
        </div>

        <div id="stats-tab" class="tab-content">
            <div class="card">
                <h2>Áµ±Ë®àÊÉÖÂ†±</h2>
                <div class="stats" id="statsContainer">
                    <div class="stat-item">
                        <div class="stat-number" id="totalRecords">0</div>
                        <div class="stat-label">Á∑èË®òÈå≤Êï∞</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="avgSleep">-</div>
                        <div class="stat-label">Âπ≥ÂùáÁù°Áú†ÊôÇÈñì</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="commonMood">-</div>
                        <div class="stat-label">ÊúÄÈ†ªÂá∫Ê∞óÂàÜ</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number" id="commonSymptom">-</div>
                        <div class="stat-label">ÊúÄÈ†ªÂá∫ÁóáÁä∂</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let records = [];
        let selectedMoods = new Set();
        let selectedSymptoms = new Set();

        // Ê∞óÂàÜ„Çø„Ç∞ÈÅ∏Êäû
        document.querySelectorAll('.mood-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const mood = this.dataset.mood;
                if (selectedMoods.has(mood)) {
                    selectedMoods.delete(mood);
                    this.classList.remove('selected');
                } else {
                    selectedMoods.add(mood);
                    this.classList.add('selected');
                }
            });
        });

        // ÁóáÁä∂ÈÅ∏Êäû
        function toggleSymptom(element, symptom) {
            const checkbox = element.querySelector('input');
            checkbox.checked = !checkbox.checked;
            
            if (checkbox.checked) {
                selectedSymptoms.add(symptom);
                element.classList.add('selected');
            } else {
                selectedSymptoms.delete(symptom);
                element.classList.remove('selected');
            }
        }

        // „Çπ„Ç±„Éº„É´ÂÄ§Êõ¥Êñ∞
        function updateScaleValue(scaleId, value) {
            document.getElementById(scaleId + '-value').textContent = value;
        }

        // „Éï„Ç©„Éº„É†ÈÄÅ‰ø°
        document.getElementById('moodForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const record = {
                id: Date.now(),
                date: new Date().toLocaleDateString('ja-JP'),
                datetime: new Date().toLocaleString('ja-JP'),
                moods: Array.from(selectedMoods),
                symptoms: Array.from(selectedSymptoms),
                mentalScales: {
                    depression: parseInt(document.getElementById('depression').value),
                    anxiety: parseInt(document.getElementById('anxiety').value),
                    panic: parseInt(document.getElementById('panic').value),
                    ocd: parseInt(document.getElementById('ocd').value),
                    adhd: parseInt(document.getElementById('adhd').value),
                    dissociation: parseInt(document.getElementById('dissociation').value)
                },
                menstruation: document.querySelector('input[name="menstruation"]:checked')?.value || null,
                sleep: parseFloat(document.getElementById('sleep').value) || null,
                notes: document.getElementById('notes').value.trim()
            };

            records.unshift(record);
            
            // „Éï„Ç©„Éº„É†„É™„Çª„ÉÉ„Éà
            this.reset();
            selectedMoods.clear();
            selectedSymptoms.clear();
            document.querySelectorAll('.mood-btn').forEach(b => b.classList.remove('selected'));
            document.querySelectorAll('.checkbox-item').forEach(b => b.classList.remove('selected'));
            document.querySelectorAll('.scale-value').forEach(v => v.textContent = '0');

            alert('Ë®òÈå≤„Çí‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºÅ');
            updateDisplay();
        });

        // „Çø„ÉñÂàá„ÇäÊõø„Åà
        function switchTab(tabName) {
            document.querySelectorAll('.tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            
            event.target.classList.add('active');
            document.getElementById(tabName + '-tab').classList.add('active');
            
            if (tabName === 'history') {
                displayRecords();
            } else if (tabName === 'stats') {
                displayStats();
            }
        }

        // Ë®òÈå≤Ë°®Á§∫
        function displayRecords() {
            const container = document.getElementById('recordsList');
            
            if (records.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div>üìù</div>
                        <p>„Åæ„Å†Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì<br>ÊúÄÂàù„ÅÆË®òÈå≤„Çí‰ΩúÊàê„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = records.map(record => `
                <div class="record-item">
                    <div class="record-date">${record.datetime}</div>
                    
                    ${record.moods.length > 0 ? `
                        <div class="record-section">
                            <h4>üé≠ Ê∞óÂàÜ„ÉªÊÑüÊÉÖ</h4>
                            <div class="record-tags">
                                ${record.moods.map(mood => `<span class="record-tag">${getMoodLabel(mood)}</span>`).join('')}
                            </div>
                        </div>
                    ` : ''}
                    
                    ${record.symptoms.length > 0 ? `
                        <div class="record-section">
                            <h4>üè• Ë∫´‰ΩìÁóáÁä∂</h4>
                            <div class="record-tags">
                                ${record.symptoms.map(symptom => `<span class="record-tag">${getSymptomLabel(symptom)}</span>`).join('')}
                            </div>
                        </div>
                    ` : ''}
                    
                    ${Object.values(record.mentalScales).some(v => v > 0) ? `
                        <div class="record-section">
                            <h4>üìä Á≤æÁ•ûÁöÑÁóáÁä∂„É¨„Éô„É´</h4>
                            ${Object.entries(record.mentalScales)
                                .filter(([key, value]) => value > 0)
                                .map(([key, value]) => `<p><strong>${getScaleLabel(key)}:</strong> ${value}/10</p>`)
                                .join('')}
                        </div>
                    ` : ''}
                    
                    ${record.menstruation ? `
                        <div class="record-section">
                            <h4>üìÖ ÁîüÁêÜ</h4>
                            <p>${getMenstruationLabel(record.menstruation)}</p>
                        </div>
                    ` : ''}
                    
                    ${record.sleep ? `
                        <div class="record-section">
                            <h4>üí§ Áù°Áú†</h4>
                            <p>${record.sleep}ÊôÇÈñì</p>
                        </div>
                    ` : ''}
                    
                    ${record.notes ? `
                        <div class="record-section">
                            <h4>üìù „É°„É¢</h4>
                            <p>${record.notes}</p>
                        </div>
                    ` : ''}
                </div>
            `).join('');
        }

        // Áµ±Ë®àË°®Á§∫
        function displayStats() {
            if (records.length === 0) {
                document.getElementById('totalRecords').textContent = '0';
                document.getElementById('avgSleep').textContent = '-';
                document.getElementById('commonMood').textContent = '-';
                document.getElementById('commonSymptom').textContent = '-';
                return;
            }

            const totalRecords = records.length;
            
            // Âπ≥ÂùáÁù°Áú†ÊôÇÈñì
            const sleepRecords = records.filter(r => r.sleep);
            const avgSleep = sleepRecords.length > 0 
                ? (sleepRecords.reduce((sum, r) => sum + r.sleep, 0) / sleepRecords.length).toFixed(1) + 'h'
                : '-';

            // ÊúÄÈ†ªÂá∫Ê∞óÂàÜ
            const allMoods = records.flatMap(r => r.moods);
            const moodCounts = {};
            allMoods.forEach(mood => {
                moodCounts[mood] = (moodCounts[mood] || 0) + 1;
            });
            const commonMood = Object.keys(moodCounts).length > 0 
                ? getMoodLabel(Object.keys(moodCounts).reduce((a, b) => moodCounts[a] > moodCounts[b] ? a : b))
                : '-';

            // ÊúÄÈ†ªÂá∫ÁóáÁä∂
            const allSymptoms = records.flatMap(r => r.symptoms);
            const symptomCounts = {};
            allSymptoms.forEach(symptom => {
                symptomCounts[symptom] = (symptomCounts[symptom] || 0) + 1;
            });
            const commonSymptom = Object.keys(symptomCounts).length > 0 
                ? getSymptomLabel(Object.keys(symptomCounts).reduce((a, b) => symptomCounts[a] > symptomCounts[b] ? a : b))
                : '-';

            document.getElementById('totalRecords').textContent = totalRecords;
            document.getElementById('avgSleep').textContent = avgSleep;
            document.getElementById('commonMood').textContent = commonMood;
            document.getElementById('commonSymptom').textContent = commonSymptom;
        }

        // „Éò„É´„Éë„ÉºÈñ¢Êï∞
        function getMoodLabel(mood) {
            const labels = {
                'happy': 'üòä Âπ∏„Åõ',
                'excited': 'ü§© ËààÂ•Æ',
                'calm': 'üòå Á©è„ÇÑ„Åã',
                'tired': 'üò¥ Áú†„Åü„ÅÑ',
                'listless': 'üòë ÁÑ°Ê∞óÂäõ',
                'irritated': 'üò† „Ç§„É©„Ç§„É©',
                'anxious': 'üò∞ ‰∏çÂÆâ',
                'sad': 'üò¢ ÊÇ≤„Åó„ÅÑ',
                'lonely': 'üòî Â≠§Áã¨',
                'confused': 'üòµ Ê∑∑‰π±',
                'focused': 'üßê ÈõÜ‰∏≠',
                'motivated': 'üí™ „ÇÑ„ÇãÊ∞ó'
            };
            return labels[mood] || mood;
        }

        function getSymptomLabel(symptom) {
            const labels = {
                'headache': 'ü§ï È†≠Áóõ',
                'stomachache': 'ü§¢ ËÖπÁóõ„ÉªËÉÉÁóõ',
                'nausea': 'ü§Æ Âêê„ÅçÊ∞ó',
                'skin_problem': 'üò£ ËÇåËçí„Çå',
                'insomnia': 'üò™ ‰∏çÁú†',
                'oversleep': 'üò¥ ÈÅéÁú†',
                'appetite_increase': 'üçΩÔ∏è È£üÊ¨≤Êó∫Áõõ',
                'appetite_loss': 'üö´ È£üÊ¨≤‰∏çÊåØ',
                'fatigue': 'üòµ‚Äçüí´ Áñ≤Âä¥ÊÑü',
                'muscle_tension': 'üí™ Á≠ãËÇâ„ÅÆÁ∑äÂºµ',
                'dizziness': 'üòµ „ÇÅ„Åæ„ÅÑ',
                'palpitation': 'üíì ÂãïÊÇ∏'
            };
            return labels[symptom] || symptom;
        }

        function getScaleLabel(scale) {
            const labels = {
                'depression': '„ÅÜ„Å§ÁóáÁä∂',
                'anxiety': '‰∏çÂÆâÁóáÁä∂',
                'panic': '„Éë„Éã„ÉÉ„ÇØÁóáÁä∂',
                'ocd': 'Âº∑Ëø´ÁóáÁä∂',
                'adhd': 'ADHDÁóáÁä∂',
                'dissociation': 'Ëß£Èõ¢ÁóáÁä∂'
            };
            return labels[scale] || scale;
        }

        function getMenstruationLabel(menstruation) {
            const labels = {
                'yes': 'ü©∏ ÁîüÁêÜ‰∏≠',
                'pms': '‚ö†Ô∏è PMS',
                'no': '‚úÖ „Å™„Åó'
            };
            return labels[menstruation] || menstruation;
        }

        function updateDisplay() {
            displayRecords();
            displayStats();
        }

        // ÂàùÊúüÂåñ
        updateDisplay();
    </script>
</body>
</html>
                        